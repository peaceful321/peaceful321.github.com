---
layout: post
title:  "Charles工具使用初步总结"
categories: tools
tags: qiniu 
author: xuhuanchao
description: Charles工具使用初步总结
---

# Charles工具使用初步总结

## 简介

![](http://p2wb9k4jd.bkt.clouddn.com/15020944100768.jpg)

Charles 是在 Mac 下常用的网络封包截取工具，在做移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。
Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。
除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议；配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。

#### 功能

* 截取 Http 和 Https 网络封包
* 支持重发网络请求，方便后端调试
* 支持修改网络请求参数
* 支持网络请求的截获并动态修改
* 支持模拟慢速网络

## 将 Charles 设置成系统代理

在Charles安装好后，需要设置为系统代理，前面提到Charles 是通过将自己设置成代理服务器来完成封包截取的，所以使用 Charles 的第一步是将其设置成系统的代理服务器。
启动 Charles 后，第一次 Charles 会请求给它设置系统代理的权限。你可以输入登录密码授予 Charles 该权限。你也可以忽略该请求，然后在需要将 Charles 设置成系统代理时，选择菜单中的 “Proxy” -> “Mac OS X Proxy” 来将 Charles 设置成系统代理。如下所示：

![](http://gitblog.xuhc.me/15020897892033.jpg)

之后，你就可以看到源源不断的网络请求出现在 Charles 的界面中。
Chrome 和 Firefox 浏览器默认并不使用系统的代理服务器设置，而 Charles 是通过将自己设置成代理服务器来完成封包截取的，所以在默认情况下无法截取 Chrome 和 Firefox 浏览器的网络通讯内容。如果你需要截取的话，在 Chrome 中设置成使用系统的代理服务器设置即可，或者直接将代理服务器设置成 127.0.0.1:8888 也可达到相同效果。

## Charles 主界面介绍

![](http://gitblog.xuhc.me/15020921800202.jpg)

Charles 主要提供两种查看封包的视图，分别名为 “Structure” 和 “Sequence”。

* Structure 视图将网络请求按访问的域名分类
* Sequence 视图将网络请求按访问的时间排序

大家可以根据具体的需要在这两种视图之前来回切换。请求多了有些时候会看不过来，Charles 提供了一个简单的 Filter 功能，可以输入关键字来快速筛选出 URL 中带指定关键字的网络请求。
对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果请求内容是 POST 的表单，Charles 会自动帮你将表单进行分项显示。如果响应内容是 JSON 格式的，那么 Charles 可以自动帮你将 JSON 内容格式化，方便你查看。如果响应内容是图片，那么 Charles 可以显示出图片的预览。


## 过滤网络请求

通常情况下，我们需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。对于这种需求，以下几种办法：
方法一：在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：http://qiniu.com , 那么只需要在 Filter 栏中填入qiniu 即可。
方法二：在 Charles 的菜单栏选择 “Proxy”->”Recording Settings”，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。如下图所示：
![](http://gitblog.xuhc.me/15020924957090.jpg)

通常情况下，我们使用方法一做一些临时性的封包过滤，使用方法二做一些经常性的封包过滤。

方法三：在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，如下图所示：
![](http://gitblog.xuhc.me/15020926389422.jpg)

这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求。

## 截取 Https 通讯信息

**安装证书**

如果你需要截取分析 Https 协议相关的内容。那么需要安装 Charles 的 CA 证书。具体步骤如下。
首先我们需要在 Mac 电脑上安装证书。点击 Charles 的顶部菜单，选择 “Help” -> “SSL Proxying” -> “Install Charles Root Certificate”，然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书。如下图所示：

![](http://gitblog.xuhc.me/15020933794233.jpg)

需要注意的是，即使是安装完证书之后，Charles 默认也并不截取 Https 网络通讯的信息，如果你想对截取某个网站上的所有 Https 网络请求，可以在该请求上右击，选择 SSL proxy；
这样，对于该 Host 的所有 SSL 请求可以被截取到了。

## 模拟慢速网络

在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。
在 Charles 的菜单上，选择 “Proxy”->”Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。如下图所示：

![](http://gitblog.xuhc.me/15020938016817.jpg)

如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。

## 给服务器做压力测试

我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，方法如下。
我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，如下所示：

![](http://gitblog.xuhc.me/15020939554092.jpg)

接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。

![](http://gitblog.xuhc.me/15020939785088.jpg)

## 反向代理

Charles 的反向代理功能允许我们将本地的端口映射到远程的另一个端口上。例如，在下图中，我将本机的 61234 端口映射到了远程（www.qiniu.com）的80端口上了。这样，当我访问本地的 61234 端口时，实际返回的内容会由 www.qiniu.com 的 80 端口提供。

![](http://gitblog.xuhc.me/15020952880208.jpg)

## 修改服务器返回内容

有些时候我们想让服务器返回一些指定的内容，方便我们调试一些特殊情况。例如列表页面为空的情况，数据异常的情况，部分耗时的网络请求超时的情况等。如果没有 Charles，要服务器配合构造相应的数据显得会比较麻烦。这个时候，使用 Charles 相关的功能就可以满足我们的需求。
根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是：
Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。
Rewrite 功能适合对网络请求进行一些正则替换。
Breakpoints 功能适合做一些临时性的修改。

**Map 功能**

Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。

在 Charles 的菜单中，选择 “Tools”->”Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。

![](http://gitblog.xuhc.me/15020968024197.jpg)

对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。下图是一个示例，我将所有 test.qiniu.com（测试服务器）的请求重定向到了 www.qiniu.com（线上服务器）。

![](http://gitblog.xuhc.me/15020968988758.jpg)

对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地（如下图所示），然后稍加修改，成为我们的目标映射文件。

![](http://gitblog.xuhc.me/15020970079566.jpg)

Map Local 在使用的时候，有一个潜在的问题，就是其返回的 Http Response Header 与正常的请求并不一样。这个时候如果客户端校验了 Http Response Header 中的部分内容，就会使得该功能失效。解决办法是同时使用 Map Local 以下面提到的 Rewrite 功能，将相关的 Http 头 Rewrite 成我们希望的内容。

**Rewrite 功能**

Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。

例如，我们的客户端有一个 API 请求是获得用户昵称，而我当前的昵称是 “aaa”，
我们可以试着直接修改网络返回值，将 aaa 换成 bbb。于是我们启用 Rewrite 功能，然后设置如下的规则
完成设置之后，我们就可以从 Charles 中看到，之后的 API 获得的昵称被自动 Rewrite 成了 bbb

tips: 这个目前不太好模拟，主要是提供文字说明；

**Breakpoints 功能**

上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。
Breakpoints 功能 当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。
下图是我们临时修改获取的响应信息的 API，将文件大小进行了更改，修改完成后点击 “Execute” 则可以让网络请求继续进行。

![](http://gitblog.xuhc.me/15020981784370.jpg)

需要注意的是，使用 Breakpoints 功能将网络请求截获并修改过程中，整个网络请求的计时并不会暂停，所以长时间的暂停可能导致客户端的请求超时。

## Proxy菜单

![](http://gitblog.xuhc.me/15020965714042.jpg)






